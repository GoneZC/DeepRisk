# 医保费用查询完整流程（按请求顺序）

## 1. 客户端发送查询请求
**客户端操作**：
- 构建查询参数（就诊ID、患者编号等）
- 在请求头中添加JWT令牌：`Authorization: Bearer {token}`
- 发送POST请求到 `http://localhost:8082/api/settlements/search`

**请求示例**：

```javascript
axios.post('http://localhost:8082/api/settlements/search', {
  mdtrtId: '1234',
  psnNo: '5678',
  page: 0,
  size: 10,
  medTypes: ['11', '21']
}, {
  headers: { Authorization: 'Bearer eyJhbGciOiJIUz...' }
})
```

## 2. API网关接收并处理请求
**服务**: api-gateway-service
**函数**: `com.demo.filter.JwtAuthenticationFilter.filter()`
**处理流程**:

- 接收客户端请求
- 从请求头提取JWT令牌
- 验证令牌有效性
- 从令牌中提取用户信息（用户ID、角色、医院编码）
- 将用户信息添加到新的请求头
- 转发修改后的请求到费用查询服务

**路由配置**:
```yaml
# application.yml
spring.cloud.gateway.routes:
  - id: fee-query-service
    uri: http://localhost:8081
    predicates:
      - Path=/api/**
```

## 3. 费用查询服务接收请求并建立用户上下文
**服务**: fee-query-service
**函数**: `com.demo.config.RequestInterceptor.preHandle()`
**处理流程**:
- 接收来自API网关的请求
- 从请求头提取用户信息（API网关添加的）
- 在ThreadLocal中建立用户上下文以供后续使用
```java
UserContext.setCurrentUser(new UserInfo(userId, role, hospitalCode));
```

## 4. 费用查询控制器处理请求
**服务**: fee-query-service
**函数**: `com.demo.controller.SettlementController.searchSettlements()`
**处理流程**:
- 接收并解析查询参数
- 调用服务层执行查询
```java
Page<Settlement> pageResult = settlementService.searchSettlements(
    request.getMdtrtId(), request.getPsnNo(), 
    request.getPage(), request.getSize(), medTypeList
);
```

## 5. 服务层执行查询并应用权限过滤
**服务**: fee-query-service
**函数**: `com.demo.service.SettlementService.searchSettlements()`
**处理流程**:
- 利用AOP代理支持缓存功能
- 构建查询规范（包含权限过滤）
- 从数据库获取数据
- 应用基于用户角色的数据权限过滤：
```java
// 关键权限过滤逻辑
UserInfo userInfo = UserContext.getCurrentUser();
if (userInfo != null && !"INSURANCE_BUREAU".equals(userInfo.getRole())) {
    // 非医保局用户只能查看自己医院的数据
    predicates.add(cb.equal(root.get("fixmedinsCode"), userInfo.getHospitalCode()));
}
```

## 6. 返回查询结果
**服务**: fee-query-service
**函数**: `com.demo.controller.SettlementController.searchSettlements()`
**处理流程**:
- 包装查询结果和分页信息
- 返回JSON响应
```java
Map<String, Object> response = new HashMap<>();
response.put("data", pageResult.getContent());
response.put("totalElements", pageResult.getTotalElements());
return response;
```

## 7. 请求完成后清理
**服务**: fee-query-service
**函数**: `com.demo.config.RequestInterceptor.afterCompletion()`
**处理流程**:
- 清理ThreadLocal中的用户上下文，防止内存泄漏
```java
UserContext.clear();
```

这个流程更准确地反映了从请求发起到响应返回的完整过程，包括认证、权限过滤和数据处理的各个环节。