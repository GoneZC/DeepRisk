{"ast":null,"code":"import \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport SockJS from 'sockjs-client';\nimport Stomp from 'webstomp-client';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:8083'; // 后端服务实际端口\n\nexport default {\n  name: 'DataMonitor',\n  data: function data() {\n    return {\n      processedCount: 0,\n      ruleTriggeredCount: 0,\n      stompClient: null,\n      connected: false,\n      loading: false,\n      heartbeatTimer: null\n    };\n  },\n  mounted: function mounted() {\n    this.connectWebSocket();\n    // 初始获取一次状态\n    this.getStatus();\n  },\n  methods: {\n    connectWebSocket: function connectWebSocket() {\n      var _this = this;\n      try {\n        // 使用完整的URL，确保端口匹配\n        var socket = new SockJS('http://localhost:8083/ws-data-collection');\n        this.stompClient = Stomp.over(socket);\n\n        // 禁用调试日志\n        this.stompClient.debug = function () {};\n        this.stompClient.connect({}, function (frame) {\n          console.log('WebSocket连接成功');\n          _this.connected = true;\n\n          // 订阅状态更新\n          _this.stompClient.subscribe('/topic/collection-status', function (response) {\n            var statusUpdate = JSON.parse(response.body);\n            console.log('收到状态更新:', statusUpdate);\n\n            // 更新计数器\n            _this.processedCount = statusUpdate.processedCount;\n            _this.ruleTriggeredCount = statusUpdate.ruleTriggeredCount;\n          });\n\n          // 开始心跳检测\n          _this.startHeartbeat();\n        }, function (error) {\n          console.error('WebSocket连接错误:', error);\n          _this.connected = false;\n\n          // 5秒后自动重连\n          setTimeout(function () {\n            console.log('尝试重新连接WebSocket...');\n            _this.connectWebSocket();\n          }, 5000);\n        });\n      } catch (e) {\n        console.error('WebSocket初始化错误:', e);\n        this.connected = false;\n      }\n    },\n    startHeartbeat: function startHeartbeat() {\n      var _this2 = this;\n      // 每30秒发送一次心跳\n      this.heartbeatTimer = setInterval(function () {\n        if (_this2.stompClient && _this2.stompClient.connected) {\n          _this2.stompClient.send('/app/heartbeat', JSON.stringify({\n            timestamp: new Date().getTime()\n          }));\n        } else {\n          _this2.stopHeartbeat();\n          _this2.connectWebSocket();\n        }\n      }, 30000);\n    },\n    stopHeartbeat: function stopHeartbeat() {\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n      }\n    },\n    triggerCollection: function triggerCollection() {\n      var _this3 = this;\n      this.loading = true;\n      axios.post('/api/data-collection/collect').then(function () {\n        console.log('数据采集触发成功');\n      })[\"catch\"](function (error) {\n        console.error('数据采集触发失败:', error);\n      })[\"finally\"](function () {\n        _this3.loading = false;\n      });\n    },\n    getStatus: function getStatus() {\n      var _this4 = this;\n      axios.get('/api/data-collection/status').then(function (response) {\n        _this4.processedCount = response.data.processedCount;\n        _this4.ruleTriggeredCount = response.data.ruleTriggeredCount;\n      })[\"catch\"](function (error) {\n        console.error('获取状态失败:', error);\n      });\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["SockJS","Stomp","axios","defaults","baseURL","name","data","processedCount","ruleTriggeredCount","stompClient","connected","loading","heartbeatTimer","mounted","connectWebSocket","getStatus","methods","_this","socket","over","debug","connect","frame","console","log","subscribe","response","statusUpdate","JSON","parse","body","startHeartbeat","error","setTimeout","e","_this2","setInterval","send","stringify","timestamp","Date","getTime","stopHeartbeat","clearInterval","triggerCollection","_this3","post","then","_this4","get","beforeUnmount","disconnect"],"sources":["D:\\Code\\Project\\Medical Insurance Anti-Fraud System\\frontend\\src\\views\\DataMonitor.vue"],"sourcesContent":["<template>\r\n  <div class=\"data-collection-monitor\">\r\n    <h2>数据采集实时监控</h2>\r\n    <div class=\"status-cards\">\r\n      <div class=\"status-card\">\r\n        <div class=\"card-title\">已处理数据</div>\r\n        <div class=\"card-value\">{{ processedCount }}</div>\r\n      </div>\r\n      <div class=\"status-card\">\r\n        <div class=\"card-title\">触发规则数据</div>\r\n        <div class=\"card-value\">{{ ruleTriggeredCount }}</div>\r\n      </div>\r\n    </div>\r\n    \r\n    <el-button type=\"primary\" @click=\"triggerCollection\" :loading=\"loading\">\r\n      模拟数据采集\r\n    </el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'webstomp-client';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:8083'; // 后端服务实际端口\r\n\r\nexport default {\r\n  name: 'DataMonitor',\r\n  data() {\r\n    return {\r\n      processedCount: 0,\r\n      ruleTriggeredCount: 0,\r\n      stompClient: null,\r\n      connected: false,\r\n      loading: false,\r\n      heartbeatTimer: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.connectWebSocket();\r\n    // 初始获取一次状态\r\n    this.getStatus();\r\n  },\r\n  methods: {\r\n    connectWebSocket() {\r\n      try {\r\n        // 使用完整的URL，确保端口匹配\r\n        const socket = new SockJS('http://localhost:8083/ws-data-collection');\r\n        this.stompClient = Stomp.over(socket);\r\n        \r\n        // 禁用调试日志\r\n        this.stompClient.debug = () => {};\r\n        \r\n        this.stompClient.connect({}, frame => {\r\n          console.log('WebSocket连接成功');\r\n          this.connected = true;\r\n          \r\n          // 订阅状态更新\r\n          this.stompClient.subscribe('/topic/collection-status', response => {\r\n            const statusUpdate = JSON.parse(response.body);\r\n            console.log('收到状态更新:', statusUpdate);\r\n            \r\n            // 更新计数器\r\n            this.processedCount = statusUpdate.processedCount;\r\n            this.ruleTriggeredCount = statusUpdate.ruleTriggeredCount;\r\n          });\r\n          \r\n          // 开始心跳检测\r\n          this.startHeartbeat();\r\n          \r\n        }, error => {\r\n          console.error('WebSocket连接错误:', error);\r\n          this.connected = false;\r\n          \r\n          // 5秒后自动重连\r\n          setTimeout(() => {\r\n            console.log('尝试重新连接WebSocket...');\r\n            this.connectWebSocket();\r\n          }, 5000);\r\n        });\r\n        \r\n      } catch (e) {\r\n        console.error('WebSocket初始化错误:', e);\r\n        this.connected = false;\r\n      }\r\n    },\r\n    \r\n    startHeartbeat() {\r\n      // 每30秒发送一次心跳\r\n      this.heartbeatTimer = setInterval(() => {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n          this.stompClient.send('/app/heartbeat', JSON.stringify({timestamp: new Date().getTime()}));\r\n        } else {\r\n          this.stopHeartbeat();\r\n          this.connectWebSocket();\r\n        }\r\n      }, 30000);\r\n    },\r\n    \r\n    stopHeartbeat() {\r\n      if (this.heartbeatTimer) {\r\n        clearInterval(this.heartbeatTimer);\r\n      }\r\n    },\r\n    triggerCollection() {\r\n      this.loading = true;\r\n      axios.post('/api/data-collection/collect')\r\n        .then(() => {\r\n          console.log('数据采集触发成功');\r\n        })\r\n        .catch(error => {\r\n          console.error('数据采集触发失败:', error);\r\n        })\r\n        .finally(() => {\r\n          this.loading = false;\r\n        });\r\n    },\r\n    getStatus() {\r\n      axios.get('/api/data-collection/status')\r\n        .then(response => {\r\n          this.processedCount = response.data.processedCount;\r\n          this.ruleTriggeredCount = response.data.ruleTriggeredCount;\r\n        })\r\n        .catch(error => {\r\n          console.error('获取状态失败:', error);\r\n        });\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.stompClient && this.stompClient.connected) {\r\n      this.stompClient.disconnect();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.data-collection-monitor {\r\n  padding: 20px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n.status-cards {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n.status-card {\r\n  flex: 1;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  background-color: #f5f7fa;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n}\r\n.card-title {\r\n  font-size: 16px;\r\n  color: #606266;\r\n  margin-bottom: 10px;\r\n}\r\n.card-value {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: #409EFF;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}