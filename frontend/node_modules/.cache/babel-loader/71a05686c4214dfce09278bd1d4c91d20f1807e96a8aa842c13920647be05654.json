{"ast":null,"code":"import _typeof from \"D:/Code/Project/Medical Insurance Anti-Fraud System/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.timers.js\";\nimport SockJS from 'sockjs-client';\nimport Stomp from 'webstomp-client';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:8083'; // 后端服务实际端口\n\nexport default {\n  name: 'DataMonitor',\n  data: function data() {\n    return {\n      processedCount: 0,\n      ruleTriggeredCount: 0,\n      stompClient: null,\n      connected: false,\n      loading: false,\n      heartbeatTimer: null,\n      showDebug: true,\n      lastMessage: '无'\n    };\n  },\n  mounted: function mounted() {\n    this.connectWebSocket();\n    // 初始获取一次状态\n    this.getStatus();\n  },\n  methods: {\n    connectWebSocket: function connectWebSocket() {\n      var _this = this;\n      try {\n        // 使用完整的URL，确保端口匹配\n        var socket = new SockJS('http://localhost:8083/ws-data-collection');\n        this.stompClient = Stomp.over(socket);\n\n        // 禁用调试日志\n        this.stompClient.debug = function () {};\n        this.stompClient.connect({}, function (frame) {\n          console.log('WebSocket连接成功');\n          _this.connected = true;\n\n          // 订阅状态更新\n          _this.stompClient.subscribe('/topic/collection-status', function (response) {\n            _this.lastMessage = response.body;\n            var statusUpdate = JSON.parse(response.body);\n            console.log('收到状态更新原始数据:', response.body);\n            console.log('收到状态更新JSON解析后:', statusUpdate);\n            console.log('当前计数器:', _this.processedCount, _this.ruleTriggeredCount);\n\n            // 直接操作DOM更新计数器显示\n            if (statusUpdate && typeof statusUpdate.processedCount !== 'undefined') {\n              // 直接更新DOM\n              _this.updateDOMDirectly(statusUpdate.processedCount, statusUpdate.ruleTriggeredCount);\n              // 更新原生HTML计数器\n              _this.updateRawCounters(statusUpdate.processedCount, statusUpdate.ruleTriggeredCount);\n            } else {\n              console.error('收到的状态更新格式不正确:', statusUpdate);\n            }\n          });\n\n          // 开始心跳检测\n          _this.startHeartbeat();\n        }, function (error) {\n          console.error('WebSocket连接错误:', error);\n          _this.connected = false;\n\n          // 5秒后自动重连\n          setTimeout(function () {\n            console.log('尝试重新连接WebSocket...');\n            _this.connectWebSocket();\n          }, 5000);\n        });\n      } catch (e) {\n        console.error('WebSocket初始化错误:', e);\n        this.connected = false;\n      }\n    },\n    startHeartbeat: function startHeartbeat() {\n      var _this2 = this;\n      // 每30秒发送一次心跳\n      this.heartbeatTimer = setInterval(function () {\n        if (_this2.stompClient && _this2.stompClient.connected) {\n          console.log('发送心跳...');\n          _this2.stompClient.send('/app/heartbeat', JSON.stringify({\n            client: 'frontend',\n            timestamp: new Date().getTime()\n          }));\n        } else {\n          console.log('WebSocket未连接，停止心跳');\n          _this2.stopHeartbeat();\n          _this2.connectWebSocket();\n        }\n      }, 30000);\n    },\n    stopHeartbeat: function stopHeartbeat() {\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n      }\n    },\n    triggerCollection: function triggerCollection() {\n      var _this3 = this;\n      this.loading = true;\n      console.log('开始发送数据采集请求...');\n      console.log('请求URL:', axios.defaults.baseURL + '/api/data-collection/collect');\n\n      // 记录当前时间戳，用于跟踪请求\n      var requestTime = new Date().toISOString();\n      console.log('请求时间:', requestTime);\n\n      // 记录发送前的计数值\n      console.log('发送前计数:', this.processedCount, this.ruleTriggeredCount);\n      axios.post('/api/data-collection/collect').then(function (response) {\n        console.log('数据采集触发成功，响应:', response.data);\n\n        // 检查响应中是否包含计数信息\n        if (response.data && response.data.counts) {\n          console.log('响应中包含计数数据:', response.data.counts);\n\n          // 直接更新计数器\n          var counts = response.data.counts;\n          _this3.updateRawCounters(counts.processedCount, counts.ruleTriggeredCount);\n          _this3.updateDOMDirectly(counts.processedCount, counts.ruleTriggeredCount);\n        }\n\n        // 请求成功后，立即获取最新状态\n        setTimeout(function () {\n          _this3.getStatus();\n        }, 500);\n      })[\"catch\"](function (error) {\n        console.error('数据采集触发失败:', error);\n        if (error.response) {\n          console.error('错误响应:', error.response.status, error.response.data);\n        }\n      })[\"finally\"](function () {\n        _this3.loading = false;\n\n        // 无论成功失败，2秒后再次获取状态，确保有最新数据\n        setTimeout(function () {\n          console.log('延迟获取最新状态...');\n          _this3.getStatus();\n        }, 2000);\n      });\n    },\n    getStatus: function getStatus() {\n      var _this4 = this;\n      console.log('获取最新状态...');\n      axios.get('/api/data-collection/status').then(function (response) {\n        console.log('获取状态成功:', response.data);\n\n        // 获取到的最新状态\n        var status = response.data;\n\n        // 更新所有计数器\n        _this4.updateRawCounters(status.processedCount, status.ruleTriggeredCount);\n        _this4.updateDOMDirectly(status.processedCount, status.ruleTriggeredCount);\n\n        // 同时更新Vue状态\n        _this4.processedCount = isNaN(Number(status.processedCount)) ? 0 : Number(status.processedCount);\n        _this4.ruleTriggeredCount = isNaN(Number(status.ruleTriggeredCount)) ? 0 : Number(status.ruleTriggeredCount);\n        _this4.$forceUpdate();\n      })[\"catch\"](function (error) {\n        console.error('获取状态失败:', error);\n      });\n    },\n    testWebSocket: function testWebSocket() {\n      console.log('测试WebSocket消息...');\n      axios.get('/api/data-collection/test-websocket').then(function (response) {\n        console.log('WebSocket测试请求发送成功:', response.data);\n      })[\"catch\"](function (error) {\n        console.error('WebSocket测试请求失败:', error);\n      });\n    },\n    testLocalCounter: function testLocalCounter() {\n      console.log('测试本地计数器...');\n      this.processedCount += 1;\n      this.ruleTriggeredCount += 1;\n      console.log('本地计数器已增加到:', this.processedCount, this.ruleTriggeredCount);\n    },\n    forceIncrement: function forceIncrement() {\n      var _this5 = this;\n      console.log('发送强制+1请求...');\n      // 添加完整URL和检查baseURL\n      console.log('完整请求URL:', axios.defaults.baseURL + '/api/data-collection/force-increment');\n      axios.get('/api/data-collection/force-increment').then(function (response) {\n        console.log('强制+1请求成功:', response.data);\n        // 手动刷新状态，避免依赖WebSocket\n        _this5.getStatus();\n      })[\"catch\"](function (error) {\n        console.error('强制+1请求失败:', error);\n        // 添加更多错误信息\n        if (error.response) {\n          console.error('请求错误状态码:', error.response.status);\n          console.error('请求错误详情:', error.response.data);\n        }\n      });\n    },\n    resubscribe: function resubscribe() {\n      var _this6 = this;\n      if (this.stompClient && this.connected) {\n        console.log('重新订阅WebSocket topics');\n        // 先取消订阅\n        try {\n          this.stompClient.unsubscribe('/topic/collection-status');\n        } catch (e) {\n          console.warn('取消订阅失败:', e);\n        }\n\n        // 重新订阅\n        this.stompClient.subscribe('/topic/collection-status', function (response) {\n          _this6.lastMessage = response.body;\n          var statusUpdate = JSON.parse(response.body);\n          console.log('重新订阅后收到状态更新:', statusUpdate);\n\n          // 更新计数器 - 使用Vue的$set确保响应式\n          _this6.updateCounters(statusUpdate.processedCount, statusUpdate.ruleTriggeredCount);\n        });\n        console.log('重新订阅完成');\n      } else {\n        console.error('WebSocket未连接，无法重新订阅');\n        this.connectWebSocket();\n      }\n    },\n    updateCounters: function updateCounters(processed, triggered) {\n      console.log('手动更新计数器 - 转换前类型:', _typeof(processed), _typeof(triggered));\n\n      // 确保是整数类型\n      processed = parseInt(processed);\n      triggered = parseInt(triggered);\n      console.log('手动更新计数器:', processed, triggered);\n\n      // 使用Vue的数据更新方式\n      this.$data.processedCount = processed;\n      this.$data.ruleTriggeredCount = triggered;\n      console.log('更新后的数据:', this.$data.processedCount, this.$data.ruleTriggeredCount);\n\n      // 多种方式尝试强制更新\n      this.$forceUpdate();\n\n      // 使用直接DOM更新作为备份\n      setTimeout(function () {\n        var processedEl = document.querySelector('.status-card:first-child .card-value');\n        var triggeredEl = document.querySelector('.status-card:last-child .card-value');\n        if (processedEl && triggeredEl) {\n          processedEl.textContent = processed;\n          triggeredEl.textContent = triggered;\n          console.log('通过setTimeout直接更新DOM完成');\n        }\n      }, 50);\n    },\n    testAllApis: function testAllApis() {\n      console.log('测试所有已知API...');\n\n      // 测试 /status API\n      console.log('测试 /api/data-collection/status...');\n      axios.get('/api/data-collection/status').then(function (response) {\n        console.log('状态API测试成功:', response.data);\n      })[\"catch\"](function (error) {\n        console.error('状态API测试失败:', error);\n      });\n\n      // 测试 /test-websocket API\n      console.log('测试 /api/data-collection/test-websocket...');\n      axios.get('/api/data-collection/test-websocket').then(function (response) {\n        console.log('测试WebSocket API测试成功:', response.data);\n      })[\"catch\"](function (error) {\n        console.error('测试WebSocket API测试失败:', error);\n      });\n\n      // 测试 /collect API\n      console.log('测试 /api/data-collection/collect...');\n      axios.post('/api/data-collection/collect').then(function (response) {\n        console.log('采集API测试成功:', response.data);\n      })[\"catch\"](function (error) {\n        console.error('采集API测试失败:', error);\n      });\n    },\n    forceRender: function forceRender() {\n      console.log('强制重新渲染视图...');\n      this.$forceUpdate();\n    },\n    updateDOM: function updateDOM() {\n      console.log('强制DOM更新...');\n      // 使用jQuery或原生DOM更新元素内容，绕过Vue\n      var processedEl = document.querySelector('.status-card:first-child .card-value');\n      var triggeredEl = document.querySelector('.status-card:last-child .card-value');\n      if (processedEl && triggeredEl) {\n        processedEl.textContent = this.processedCount;\n        triggeredEl.textContent = this.ruleTriggeredCount;\n        console.log('直接更新DOM: ', processedEl.textContent, triggeredEl.textContent);\n      } else {\n        console.error('找不到DOM元素');\n      }\n    },\n    updateDOMDirectly: function updateDOMDirectly(processed, triggered) {\n      console.log('直接更新DOM元素...');\n\n      // 如果没有传入参数，使用当前状态\n      if (arguments.length === 0) {\n        try {\n          var lastMessageObj = this.lastMessage ? JSON.parse(this.lastMessage) : {\n            processedCount: 0,\n            ruleTriggeredCount: 0\n          };\n          processed = lastMessageObj.processedCount;\n          triggered = lastMessageObj.ruleTriggeredCount;\n          console.log('从lastMessage解析:', processed, triggered);\n        } catch (e) {\n          console.error('解析lastMessage失败:', e);\n          processed = 0;\n          triggered = 0;\n        }\n      }\n\n      // 安全转换为数字，确保即使转换失败也有默认值\n      var processedNum = Number(processed);\n      var triggeredNum = Number(triggered);\n\n      // 检查是否为有效数字，否则使用0\n      var safeProcessed = !isNaN(processedNum) ? processedNum : 0;\n      var safeTriggered = !isNaN(triggeredNum) ? triggeredNum : 0;\n      console.log('安全转换后的数字:', safeProcessed, safeTriggered);\n\n      // 直接设置DOM内容 - 不使用数字而是字符串以避免NaN\n      var processedEl = document.getElementById('processed-count');\n      var triggeredEl = document.getElementById('rule-triggered-count');\n      if (processedEl && triggeredEl) {\n        // 绕过Vue直接设置文本内容\n        processedEl.textContent = String(safeProcessed);\n        triggeredEl.textContent = String(safeTriggered);\n        console.log('直接更新DOM完成:', processedEl.textContent, triggeredEl.textContent);\n      } else {\n        console.error('找不到DOM元素，尝试使用选择器');\n\n        // 尝试另一种选择器\n        var procEl = document.querySelector('.status-card:first-child .card-value');\n        var trigEl = document.querySelector('.status-card:last-child .card-value');\n        if (procEl && trigEl) {\n          procEl.textContent = String(safeProcessed);\n          trigEl.textContent = String(safeTriggered);\n          console.log('通过选择器更新DOM完成');\n        } else {\n          console.error('无法找到DOM元素更新');\n        }\n      }\n\n      // 同时更新Vue变量，使用安全值避免NaN\n      this.processedCount = safeProcessed;\n      this.ruleTriggeredCount = safeTriggered;\n      this.$forceUpdate();\n\n      // 额外检查数据\n      console.log('更新后Vue变量:', this.processedCount, this.ruleTriggeredCount);\n    },\n    updateRawCounters: function updateRawCounters(processed, triggered) {\n      console.log('更新原生HTML计数器...');\n\n      // 如果没有传入参数，使用当前状态\n      if (arguments.length === 0) {\n        try {\n          var lastMessageObj = this.lastMessage ? JSON.parse(this.lastMessage) : {\n            processedCount: 0,\n            ruleTriggeredCount: 0\n          };\n          processed = lastMessageObj.processedCount;\n          triggered = lastMessageObj.ruleTriggeredCount;\n        } catch (e) {\n          console.error('解析lastMessage失败:', e);\n          processed = 0;\n          triggered = 0;\n        }\n      }\n\n      // 安全转换\n      var safeProcessed = isNaN(Number(processed)) ? 0 : Number(processed);\n      var safeTriggered = isNaN(Number(triggered)) ? 0 : Number(triggered);\n\n      // 获取原生HTML元素\n      var rawProcessedEl = document.getElementById('raw-processed');\n      var rawTriggeredEl = document.getElementById('raw-triggered');\n      if (rawProcessedEl && rawTriggeredEl) {\n        // 直接更新内容\n        rawProcessedEl.textContent = String(safeProcessed);\n        rawTriggeredEl.textContent = String(safeTriggered);\n        console.log('原生HTML计数器更新完成:', safeProcessed, safeTriggered);\n\n        // 应用一个视觉效果表明更新成功\n        rawProcessedEl.style.backgroundColor = '#e6f7ff';\n        rawTriggeredEl.style.backgroundColor = '#e6f7ff';\n        setTimeout(function () {\n          rawProcessedEl.style.backgroundColor = '';\n          rawTriggeredEl.style.backgroundColor = '';\n        }, 500);\n      } else {\n        console.error('找不到原生HTML计数器元素');\n      }\n    },\n    hardRefresh: function hardRefresh() {\n      var _this7 = this;\n      console.log('执行硬重置...');\n      // 从URL直接获取最新数据并强制更新\n      axios.get('/api/data-collection/status').then(function (response) {\n        console.log('获取到最新状态:', response.data);\n        if (response.data) {\n          var proc = response.data.processedCount;\n          var trig = response.data.ruleTriggeredCount;\n\n          // 使用window对象存储，以防Vue响应式出问题\n          window.currentMetrics = {\n            processed: proc,\n            triggered: trig\n          };\n\n          // 多种方式更新，避免单一方式失效\n          _this7.processedCount = proc;\n          _this7.ruleTriggeredCount = trig;\n          _this7.$forceUpdate();\n          _this7.updateDOMDirectly(proc, trig);\n\n          // 强制浏览器渲染\n          setTimeout(function () {\n            _this7.updateDOMDirectly(proc, trig);\n          }, 100);\n        }\n      })[\"catch\"](function (error) {\n        console.error('硬重置失败:', error);\n      });\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["SockJS","Stomp","axios","defaults","baseURL","name","data","processedCount","ruleTriggeredCount","stompClient","connected","loading","heartbeatTimer","showDebug","lastMessage","mounted","connectWebSocket","getStatus","methods","_this","socket","over","debug","connect","frame","console","log","subscribe","response","body","statusUpdate","JSON","parse","updateDOMDirectly","updateRawCounters","error","startHeartbeat","setTimeout","e","_this2","setInterval","send","stringify","client","timestamp","Date","getTime","stopHeartbeat","clearInterval","triggerCollection","_this3","requestTime","toISOString","post","then","counts","status","_this4","get","isNaN","Number","$forceUpdate","testWebSocket","testLocalCounter","forceIncrement","_this5","resubscribe","_this6","unsubscribe","warn","updateCounters","processed","triggered","_typeof","parseInt","$data","processedEl","document","querySelector","triggeredEl","textContent","testAllApis","forceRender","updateDOM","arguments","length","lastMessageObj","processedNum","triggeredNum","safeProcessed","safeTriggered","getElementById","String","procEl","trigEl","rawProcessedEl","rawTriggeredEl","style","backgroundColor","hardRefresh","_this7","proc","trig","window","currentMetrics","beforeUnmount","disconnect"],"sources":["D:\\Code\\Project\\Medical Insurance Anti-Fraud System\\frontend\\src\\views\\DataMonitor.vue"],"sourcesContent":["<template>\r\n  <div class=\"data-collection-monitor\">\r\n    <h2>数据采集实时监控</h2>\r\n    <div class=\"status-cards\">\r\n      <div class=\"status-card\">\r\n        <div class=\"card-title\">已处理数据</div>\r\n        <div class=\"card-value\" id=\"processed-count\">{{ processedCount }}</div>\r\n      </div>\r\n      <div class=\"status-card\">\r\n        <div class=\"card-title\">触发规则数据</div>\r\n        <div class=\"card-value\" id=\"rule-triggered-count\">{{ ruleTriggeredCount }}</div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 纯HTML计数器，完全脱离Vue -->\r\n    <div class=\"pure-html-counters\">\r\n      <h3>原生HTML计数器(脱离Vue)</h3>\r\n      <div class=\"manual-counter\">\r\n        <div class=\"counter-label\">处理数据:</div>\r\n        <div class=\"counter-value\" id=\"raw-processed\">0</div>\r\n      </div>\r\n      <div class=\"manual-counter\">\r\n        <div class=\"counter-label\">触发规则:</div>\r\n        <div class=\"counter-value\" id=\"raw-triggered\">0</div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"debug-info\" v-if=\"showDebug\">\r\n      <p><strong>WebSocket状态:</strong> {{connected ? '已连接' : '未连接'}}</p>\r\n      <p><strong>收到的最后消息:</strong> {{lastMessage}}</p>\r\n      <p><strong>DOM中计数器值:</strong> processed={{processedCount}}, triggered={{ruleTriggeredCount}}</p>\r\n      <div class=\"debug-actions\">\r\n        <el-button size=\"small\" @click=\"forceRender\">强制渲染</el-button>\r\n        <el-button size=\"small\" @click=\"updateDOM\">更新DOM值</el-button>\r\n        <el-button size=\"small\" type=\"danger\" @click=\"updateDOMDirectly\">直接更新DOM</el-button>\r\n        <el-button size=\"small\" type=\"warning\" @click=\"updateRawCounters\">更新原生计数器</el-button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"button-group\">\r\n      <el-button type=\"primary\" @click=\"triggerCollection\" :loading=\"loading\">\r\n        模拟数据采集\r\n      </el-button>\r\n      <el-button type=\"info\" @click=\"testWebSocket\">\r\n        测试WebSocket\r\n      </el-button>\r\n      <el-button type=\"success\" @click=\"getStatus\">\r\n        刷新状态\r\n      </el-button>\r\n      <el-button type=\"warning\" @click=\"testLocalCounter\">\r\n        测试本地计数\r\n      </el-button>\r\n      <el-button type=\"danger\" @click=\"forceIncrement\">\r\n        强制+1\r\n      </el-button>\r\n      <el-button plain @click=\"showDebug = !showDebug\">\r\n        {{ showDebug ? '隐藏调试' : '显示调试' }}\r\n      </el-button>\r\n      <el-button type=\"warning\" @click=\"resubscribe\">\r\n        重新订阅\r\n      </el-button>\r\n      <el-button type=\"success\" @click=\"testAllApis\">\r\n        测试所有API\r\n      </el-button>\r\n      <el-button type=\"danger\" @click=\"hardRefresh\">\r\n        硬重置\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'webstomp-client';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:8083'; // 后端服务实际端口\r\n\r\nexport default {\r\n  name: 'DataMonitor',\r\n  data() {\r\n    return {\r\n      processedCount: 0,\r\n      ruleTriggeredCount: 0,\r\n      stompClient: null,\r\n      connected: false,\r\n      loading: false,\r\n      heartbeatTimer: null,\r\n      showDebug: true,\r\n      lastMessage: '无'\r\n    }\r\n  },\r\n  mounted() {\r\n    this.connectWebSocket();\r\n    // 初始获取一次状态\r\n    this.getStatus();\r\n  },\r\n  methods: {\r\n    connectWebSocket() {\r\n      try {\r\n        // 使用完整的URL，确保端口匹配\r\n        const socket = new SockJS('http://localhost:8083/ws-data-collection');\r\n        this.stompClient = Stomp.over(socket);\r\n        \r\n        // 禁用调试日志\r\n        this.stompClient.debug = () => {};\r\n        \r\n        this.stompClient.connect({}, frame => {\r\n          console.log('WebSocket连接成功');\r\n          this.connected = true;\r\n          \r\n          // 订阅状态更新\r\n          this.stompClient.subscribe('/topic/collection-status', response => {\r\n            this.lastMessage = response.body;\r\n            const statusUpdate = JSON.parse(response.body);\r\n            console.log('收到状态更新原始数据:', response.body);\r\n            console.log('收到状态更新JSON解析后:', statusUpdate);\r\n            console.log('当前计数器:', this.processedCount, this.ruleTriggeredCount);\r\n            \r\n            // 直接操作DOM更新计数器显示\r\n            if (statusUpdate && typeof statusUpdate.processedCount !== 'undefined') {\r\n              // 直接更新DOM\r\n              this.updateDOMDirectly(statusUpdate.processedCount, statusUpdate.ruleTriggeredCount);\r\n              // 更新原生HTML计数器\r\n              this.updateRawCounters(statusUpdate.processedCount, statusUpdate.ruleTriggeredCount);\r\n            } else {\r\n              console.error('收到的状态更新格式不正确:', statusUpdate);\r\n            }\r\n          });\r\n          \r\n          // 开始心跳检测\r\n          this.startHeartbeat();\r\n          \r\n        }, error => {\r\n          console.error('WebSocket连接错误:', error);\r\n          this.connected = false;\r\n          \r\n          // 5秒后自动重连\r\n          setTimeout(() => {\r\n            console.log('尝试重新连接WebSocket...');\r\n            this.connectWebSocket();\r\n          }, 5000);\r\n        });\r\n        \r\n      } catch (e) {\r\n        console.error('WebSocket初始化错误:', e);\r\n        this.connected = false;\r\n      }\r\n    },\r\n    \r\n    startHeartbeat() {\r\n      // 每30秒发送一次心跳\r\n      this.heartbeatTimer = setInterval(() => {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n          console.log('发送心跳...');\r\n          this.stompClient.send('/app/heartbeat', JSON.stringify({\r\n            client: 'frontend',\r\n            timestamp: new Date().getTime()\r\n          }));\r\n        } else {\r\n          console.log('WebSocket未连接，停止心跳');\r\n          this.stopHeartbeat();\r\n          this.connectWebSocket();\r\n        }\r\n      }, 30000);\r\n    },\r\n    \r\n    stopHeartbeat() {\r\n      if (this.heartbeatTimer) {\r\n        clearInterval(this.heartbeatTimer);\r\n      }\r\n    },\r\n    triggerCollection() {\r\n      this.loading = true;\r\n      console.log('开始发送数据采集请求...');\r\n      console.log('请求URL:', axios.defaults.baseURL + '/api/data-collection/collect');\r\n      \r\n      // 记录当前时间戳，用于跟踪请求\r\n      const requestTime = new Date().toISOString();\r\n      console.log('请求时间:', requestTime);\r\n      \r\n      // 记录发送前的计数值\r\n      console.log('发送前计数:', this.processedCount, this.ruleTriggeredCount);\r\n      \r\n      axios.post('/api/data-collection/collect')\r\n        .then(response => {\r\n          console.log('数据采集触发成功，响应:', response.data);\r\n          \r\n          // 检查响应中是否包含计数信息\r\n          if (response.data && response.data.counts) {\r\n            console.log('响应中包含计数数据:', response.data.counts);\r\n            \r\n            // 直接更新计数器\r\n            const counts = response.data.counts;\r\n            this.updateRawCounters(counts.processedCount, counts.ruleTriggeredCount);\r\n            this.updateDOMDirectly(counts.processedCount, counts.ruleTriggeredCount);\r\n          }\r\n          \r\n          // 请求成功后，立即获取最新状态\r\n          setTimeout(() => {\r\n            this.getStatus();\r\n          }, 500);\r\n        })\r\n        .catch(error => {\r\n          console.error('数据采集触发失败:', error);\r\n          if (error.response) {\r\n            console.error('错误响应:', error.response.status, error.response.data);\r\n          }\r\n        })\r\n        .finally(() => {\r\n          this.loading = false;\r\n          \r\n          // 无论成功失败，2秒后再次获取状态，确保有最新数据\r\n          setTimeout(() => {\r\n            console.log('延迟获取最新状态...');\r\n            this.getStatus();\r\n          }, 2000);\r\n        });\r\n    },\r\n    getStatus() {\r\n      console.log('获取最新状态...');\r\n      axios.get('/api/data-collection/status')\r\n        .then(response => {\r\n          console.log('获取状态成功:', response.data);\r\n          \r\n          // 获取到的最新状态\r\n          const status = response.data;\r\n          \r\n          // 更新所有计数器\r\n          this.updateRawCounters(status.processedCount, status.ruleTriggeredCount);\r\n          this.updateDOMDirectly(status.processedCount, status.ruleTriggeredCount);\r\n          \r\n          // 同时更新Vue状态\r\n          this.processedCount = isNaN(Number(status.processedCount)) ? 0 : Number(status.processedCount);\r\n          this.ruleTriggeredCount = isNaN(Number(status.ruleTriggeredCount)) ? 0 : Number(status.ruleTriggeredCount);\r\n          this.$forceUpdate();\r\n        })\r\n        .catch(error => {\r\n          console.error('获取状态失败:', error);\r\n        });\r\n    },\r\n    testWebSocket() {\r\n      console.log('测试WebSocket消息...');\r\n      axios.get('/api/data-collection/test-websocket')\r\n        .then(response => {\r\n          console.log('WebSocket测试请求发送成功:', response.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('WebSocket测试请求失败:', error);\r\n        });\r\n    },\r\n    testLocalCounter() {\r\n      console.log('测试本地计数器...');\r\n      this.processedCount += 1;\r\n      this.ruleTriggeredCount += 1;\r\n      console.log('本地计数器已增加到:', this.processedCount, this.ruleTriggeredCount);\r\n    },\r\n    forceIncrement() {\r\n      console.log('发送强制+1请求...');\r\n      // 添加完整URL和检查baseURL\r\n      console.log('完整请求URL:', axios.defaults.baseURL + '/api/data-collection/force-increment');\r\n      axios.get('/api/data-collection/force-increment')\r\n        .then(response => {\r\n          console.log('强制+1请求成功:', response.data);\r\n          // 手动刷新状态，避免依赖WebSocket\r\n          this.getStatus();\r\n        })\r\n        .catch(error => {\r\n          console.error('强制+1请求失败:', error);\r\n          // 添加更多错误信息\r\n          if (error.response) {\r\n            console.error('请求错误状态码:', error.response.status);\r\n            console.error('请求错误详情:', error.response.data);\r\n          }\r\n        });\r\n    },\r\n    resubscribe() {\r\n      if (this.stompClient && this.connected) {\r\n        console.log('重新订阅WebSocket topics');\r\n        // 先取消订阅\r\n        try {\r\n          this.stompClient.unsubscribe('/topic/collection-status');\r\n        } catch (e) {\r\n          console.warn('取消订阅失败:', e);\r\n        }\r\n        \r\n        // 重新订阅\r\n        this.stompClient.subscribe('/topic/collection-status', response => {\r\n          this.lastMessage = response.body;\r\n          const statusUpdate = JSON.parse(response.body);\r\n          console.log('重新订阅后收到状态更新:', statusUpdate);\r\n          \r\n          // 更新计数器 - 使用Vue的$set确保响应式\r\n          this.updateCounters(statusUpdate.processedCount, statusUpdate.ruleTriggeredCount);\r\n        });\r\n        console.log('重新订阅完成');\r\n      } else {\r\n        console.error('WebSocket未连接，无法重新订阅');\r\n        this.connectWebSocket();\r\n      }\r\n    },\r\n    updateCounters(processed, triggered) {\r\n      console.log('手动更新计数器 - 转换前类型:', typeof processed, typeof triggered);\r\n      \r\n      // 确保是整数类型\r\n      processed = parseInt(processed);\r\n      triggered = parseInt(triggered);\r\n      \r\n      console.log('手动更新计数器:', processed, triggered);\r\n      \r\n      // 使用Vue的数据更新方式\r\n      this.$data.processedCount = processed;\r\n      this.$data.ruleTriggeredCount = triggered;\r\n      \r\n      console.log('更新后的数据:', this.$data.processedCount, this.$data.ruleTriggeredCount);\r\n      \r\n      // 多种方式尝试强制更新\r\n      this.$forceUpdate();\r\n      \r\n      // 使用直接DOM更新作为备份\r\n      setTimeout(() => {\r\n        const processedEl = document.querySelector('.status-card:first-child .card-value');\r\n        const triggeredEl = document.querySelector('.status-card:last-child .card-value');\r\n        \r\n        if (processedEl && triggeredEl) {\r\n          processedEl.textContent = processed;\r\n          triggeredEl.textContent = triggered;\r\n          console.log('通过setTimeout直接更新DOM完成');\r\n        }\r\n      }, 50);\r\n    },\r\n    testAllApis() {\r\n      console.log('测试所有已知API...');\r\n      \r\n      // 测试 /status API\r\n      console.log('测试 /api/data-collection/status...');\r\n      axios.get('/api/data-collection/status')\r\n        .then(response => {\r\n          console.log('状态API测试成功:', response.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('状态API测试失败:', error);\r\n        });\r\n      \r\n      // 测试 /test-websocket API\r\n      console.log('测试 /api/data-collection/test-websocket...');\r\n      axios.get('/api/data-collection/test-websocket')\r\n        .then(response => {\r\n          console.log('测试WebSocket API测试成功:', response.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('测试WebSocket API测试失败:', error);\r\n        });\r\n      \r\n      // 测试 /collect API\r\n      console.log('测试 /api/data-collection/collect...');\r\n      axios.post('/api/data-collection/collect')\r\n        .then(response => {\r\n          console.log('采集API测试成功:', response.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('采集API测试失败:', error);\r\n        });\r\n    },\r\n    forceRender() {\r\n      console.log('强制重新渲染视图...');\r\n      this.$forceUpdate();\r\n    },\r\n    \r\n    updateDOM() {\r\n      console.log('强制DOM更新...');\r\n      // 使用jQuery或原生DOM更新元素内容，绕过Vue\r\n      const processedEl = document.querySelector('.status-card:first-child .card-value');\r\n      const triggeredEl = document.querySelector('.status-card:last-child .card-value');\r\n      \r\n      if (processedEl && triggeredEl) {\r\n        processedEl.textContent = this.processedCount;\r\n        triggeredEl.textContent = this.ruleTriggeredCount;\r\n        console.log('直接更新DOM: ', processedEl.textContent, triggeredEl.textContent);\r\n      } else {\r\n        console.error('找不到DOM元素');\r\n      }\r\n    },\r\n    updateDOMDirectly(processed, triggered) {\r\n      console.log('直接更新DOM元素...');\r\n      \r\n      // 如果没有传入参数，使用当前状态\r\n      if (arguments.length === 0) {\r\n        try {\r\n          const lastMessageObj = this.lastMessage ? JSON.parse(this.lastMessage) : {processedCount: 0, ruleTriggeredCount: 0};\r\n          processed = lastMessageObj.processedCount;\r\n          triggered = lastMessageObj.ruleTriggeredCount;\r\n          console.log('从lastMessage解析:', processed, triggered);\r\n        } catch (e) {\r\n          console.error('解析lastMessage失败:', e);\r\n          processed = 0;\r\n          triggered = 0;\r\n        }\r\n      }\r\n      \r\n      // 安全转换为数字，确保即使转换失败也有默认值\r\n      const processedNum = Number(processed);\r\n      const triggeredNum = Number(triggered);\r\n      \r\n      // 检查是否为有效数字，否则使用0\r\n      const safeProcessed = !isNaN(processedNum) ? processedNum : 0;\r\n      const safeTriggered = !isNaN(triggeredNum) ? triggeredNum : 0;\r\n      \r\n      console.log('安全转换后的数字:', safeProcessed, safeTriggered);\r\n      \r\n      // 直接设置DOM内容 - 不使用数字而是字符串以避免NaN\r\n      const processedEl = document.getElementById('processed-count');\r\n      const triggeredEl = document.getElementById('rule-triggered-count');\r\n      \r\n      if (processedEl && triggeredEl) {\r\n        // 绕过Vue直接设置文本内容\r\n        processedEl.textContent = String(safeProcessed);\r\n        triggeredEl.textContent = String(safeTriggered);\r\n        console.log('直接更新DOM完成:', processedEl.textContent, triggeredEl.textContent);\r\n      } else {\r\n        console.error('找不到DOM元素，尝试使用选择器');\r\n        \r\n        // 尝试另一种选择器\r\n        const procEl = document.querySelector('.status-card:first-child .card-value');\r\n        const trigEl = document.querySelector('.status-card:last-child .card-value');\r\n        \r\n        if (procEl && trigEl) {\r\n          procEl.textContent = String(safeProcessed);\r\n          trigEl.textContent = String(safeTriggered);\r\n          console.log('通过选择器更新DOM完成');\r\n        } else {\r\n          console.error('无法找到DOM元素更新');\r\n        }\r\n      }\r\n      \r\n      // 同时更新Vue变量，使用安全值避免NaN\r\n      this.processedCount = safeProcessed;\r\n      this.ruleTriggeredCount = safeTriggered;\r\n      this.$forceUpdate();\r\n      \r\n      // 额外检查数据\r\n      console.log('更新后Vue变量:', this.processedCount, this.ruleTriggeredCount);\r\n    },\r\n    updateRawCounters(processed, triggered) {\r\n      console.log('更新原生HTML计数器...');\r\n      \r\n      // 如果没有传入参数，使用当前状态\r\n      if (arguments.length === 0) {\r\n        try {\r\n          const lastMessageObj = this.lastMessage ? JSON.parse(this.lastMessage) : {processedCount: 0, ruleTriggeredCount: 0};\r\n          processed = lastMessageObj.processedCount;\r\n          triggered = lastMessageObj.ruleTriggeredCount;\r\n        } catch (e) {\r\n          console.error('解析lastMessage失败:', e);\r\n          processed = 0;\r\n          triggered = 0;\r\n        }\r\n      }\r\n      \r\n      // 安全转换\r\n      const safeProcessed = isNaN(Number(processed)) ? 0 : Number(processed);\r\n      const safeTriggered = isNaN(Number(triggered)) ? 0 : Number(triggered);\r\n      \r\n      // 获取原生HTML元素\r\n      const rawProcessedEl = document.getElementById('raw-processed');\r\n      const rawTriggeredEl = document.getElementById('raw-triggered');\r\n      \r\n      if (rawProcessedEl && rawTriggeredEl) {\r\n        // 直接更新内容\r\n        rawProcessedEl.textContent = String(safeProcessed);\r\n        rawTriggeredEl.textContent = String(safeTriggered);\r\n        console.log('原生HTML计数器更新完成:', safeProcessed, safeTriggered);\r\n        \r\n        // 应用一个视觉效果表明更新成功\r\n        rawProcessedEl.style.backgroundColor = '#e6f7ff';\r\n        rawTriggeredEl.style.backgroundColor = '#e6f7ff';\r\n        \r\n        setTimeout(() => {\r\n          rawProcessedEl.style.backgroundColor = '';\r\n          rawTriggeredEl.style.backgroundColor = '';\r\n        }, 500);\r\n      } else {\r\n        console.error('找不到原生HTML计数器元素');\r\n      }\r\n    },\r\n    hardRefresh() {\r\n      console.log('执行硬重置...');\r\n      // 从URL直接获取最新数据并强制更新\r\n      axios.get('/api/data-collection/status')\r\n        .then(response => {\r\n          console.log('获取到最新状态:', response.data);\r\n          \r\n          if (response.data) {\r\n            const proc = response.data.processedCount;\r\n            const trig = response.data.ruleTriggeredCount;\r\n            \r\n            // 使用window对象存储，以防Vue响应式出问题\r\n            window.currentMetrics = {\r\n              processed: proc,\r\n              triggered: trig\r\n            };\r\n            \r\n            // 多种方式更新，避免单一方式失效\r\n            this.processedCount = proc;\r\n            this.ruleTriggeredCount = trig;\r\n            this.$forceUpdate();\r\n            this.updateDOMDirectly(proc, trig);\r\n            \r\n            // 强制浏览器渲染\r\n            setTimeout(() => {\r\n              this.updateDOMDirectly(proc, trig);\r\n            }, 100);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('硬重置失败:', error);\r\n        });\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.stompClient && this.stompClient.connected) {\r\n      this.stompClient.disconnect();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.data-collection-monitor {\r\n  padding: 20px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n.status-cards {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n.status-card {\r\n  flex: 1;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  background-color: #f5f7fa;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n}\r\n.card-title {\r\n  font-size: 16px;\r\n  color: #606266;\r\n  margin-bottom: 10px;\r\n}\r\n.card-value {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: #409EFF;\r\n}\r\n.button-group {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 20px;\r\n}\r\n.debug-info {\r\n  margin: 20px 0;\r\n  padding: 15px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  border: 1px solid #ebeef5;\r\n  font-family: monospace;\r\n}\r\n.pure-html-counters {\r\n  margin: 20px 0;\r\n  padding: 15px;\r\n  background-color: #f0f9eb;\r\n  border-radius: 8px;\r\n  border: 1px solid #e1f3d8;\r\n}\r\n.manual-counter {\r\n  display: flex;\r\n  margin: 10px 0;\r\n  align-items: center;\r\n}\r\n.counter-label {\r\n  width: 100px;\r\n  font-weight: bold;\r\n}\r\n.counter-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #67c23a;\r\n  min-width: 50px;\r\n  text-align: center;\r\n  padding: 5px 10px;\r\n  background-color: #f5f7fa;\r\n  border-radius: 4px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}