{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"data-collection-monitor\"\n};\nvar _hoisted_2 = {\n  \"class\": \"status-cards\"\n};\nvar _hoisted_3 = {\n  \"class\": \"status-card\"\n};\nvar _hoisted_4 = {\n  \"class\": \"card-value\"\n};\nvar _hoisted_5 = {\n  \"class\": \"status-card\"\n};\nvar _hoisted_6 = {\n  \"class\": \"card-value\"\n};\nvar _hoisted_7 = {\n  key: 0,\n  \"class\": \"debug-info\"\n};\nvar _hoisted_8 = {\n  \"class\": \"button-group\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[11] || (_cache[11] = _createElementVNode(\"h2\", null, \"数据采集实时监控\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    \"class\": \"card-title\"\n  }, \"已处理数据\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($data.processedCount), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n    \"class\": \"card-title\"\n  }, \"触发规则数据\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, _toDisplayString($data.ruleTriggeredCount), 1 /* TEXT */)])]), $data.showDebug ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"WebSocket状态:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.connected ? '已连接' : '未连接'), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"收到的最后消息:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.lastMessage), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_8, [_createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $options.triggerCollection,\n    loading: $data.loading\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[5] || (_cache[5] = [_createTextVNode(\" 模拟数据采集 \")]);\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\", \"loading\"]), _createVNode(_component_el_button, {\n    type: \"info\",\n    onClick: $options.testWebSocket\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[6] || (_cache[6] = [_createTextVNode(\" 测试WebSocket \")]);\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"success\",\n    onClick: $options.getStatus\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[7] || (_cache[7] = [_createTextVNode(\" 刷新状态 \")]);\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"warning\",\n    onClick: $options.testLocalCounter\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[8] || (_cache[8] = [_createTextVNode(\" 测试本地计数 \")]);\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"danger\",\n    onClick: $options.forceIncrement\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[9] || (_cache[9] = [_createTextVNode(\" 强制+1 \")]);\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    plain: \"\",\n    onClick: _cache[0] || (_cache[0] = function ($event) {\n      return $data.showDebug = !$data.showDebug;\n    })\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createTextVNode(_toDisplayString($data.showDebug ? '隐藏调试' : '显示调试'), 1 /* TEXT */)];\n    }),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_button, {\n    type: \"warning\",\n    onClick: $options.resubscribe\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[10] || (_cache[10] = [_createTextVNode(\" 重新订阅 \")]);\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])])]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$data","processedCount","_hoisted_5","_hoisted_6","ruleTriggeredCount","showDebug","_hoisted_7","_createTextVNode","connected","lastMessage","_createCommentVNode","_hoisted_8","_createVNode","_component_el_button","type","onClick","$options","triggerCollection","loading","_withCtx","_cache","_","testWebSocket","getStatus","testLocalCounter","forceIncrement","plain","$event","resubscribe"],"sources":["D:\\Code\\Project\\Medical Insurance Anti-Fraud System\\frontend\\src\\views\\DataMonitor.vue"],"sourcesContent":["<template>\r\n  <div class=\"data-collection-monitor\">\r\n    <h2>数据采集实时监控</h2>\r\n    <div class=\"status-cards\">\r\n      <div class=\"status-card\">\r\n        <div class=\"card-title\">已处理数据</div>\r\n        <div class=\"card-value\">{{ processedCount }}</div>\r\n      </div>\r\n      <div class=\"status-card\">\r\n        <div class=\"card-title\">触发规则数据</div>\r\n        <div class=\"card-value\">{{ ruleTriggeredCount }}</div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"debug-info\" v-if=\"showDebug\">\r\n      <p><strong>WebSocket状态:</strong> {{connected ? '已连接' : '未连接'}}</p>\r\n      <p><strong>收到的最后消息:</strong> {{lastMessage}}</p>\r\n    </div>\r\n    \r\n    <div class=\"button-group\">\r\n      <el-button type=\"primary\" @click=\"triggerCollection\" :loading=\"loading\">\r\n        模拟数据采集\r\n      </el-button>\r\n      <el-button type=\"info\" @click=\"testWebSocket\">\r\n        测试WebSocket\r\n      </el-button>\r\n      <el-button type=\"success\" @click=\"getStatus\">\r\n        刷新状态\r\n      </el-button>\r\n      <el-button type=\"warning\" @click=\"testLocalCounter\">\r\n        测试本地计数\r\n      </el-button>\r\n      <el-button type=\"danger\" @click=\"forceIncrement\">\r\n        强制+1\r\n      </el-button>\r\n      <el-button plain @click=\"showDebug = !showDebug\">\r\n        {{ showDebug ? '隐藏调试' : '显示调试' }}\r\n      </el-button>\r\n      <el-button type=\"warning\" @click=\"resubscribe\">\r\n        重新订阅\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'webstomp-client';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:8083'; // 后端服务实际端口\r\n\r\nexport default {\r\n  name: 'DataMonitor',\r\n  data() {\r\n    return {\r\n      processedCount: 0,\r\n      ruleTriggeredCount: 0,\r\n      stompClient: null,\r\n      connected: false,\r\n      loading: false,\r\n      heartbeatTimer: null,\r\n      showDebug: true,\r\n      lastMessage: '无'\r\n    }\r\n  },\r\n  mounted() {\r\n    this.connectWebSocket();\r\n    // 初始获取一次状态\r\n    this.getStatus();\r\n  },\r\n  methods: {\r\n    connectWebSocket() {\r\n      try {\r\n        // 使用完整的URL，确保端口匹配\r\n        const socket = new SockJS('http://localhost:8083/ws-data-collection');\r\n        this.stompClient = Stomp.over(socket);\r\n        \r\n        // 禁用调试日志\r\n        this.stompClient.debug = () => {};\r\n        \r\n        this.stompClient.connect({}, frame => {\r\n          console.log('WebSocket连接成功');\r\n          this.connected = true;\r\n          \r\n          // 订阅状态更新\r\n          this.stompClient.subscribe('/topic/collection-status', response => {\r\n            this.lastMessage = response.body;\r\n            const statusUpdate = JSON.parse(response.body);\r\n            console.log('收到状态更新原始数据:', response.body);\r\n            console.log('收到状态更新JSON解析后:', statusUpdate);\r\n            console.log('当前计数器:', this.processedCount, this.ruleTriggeredCount);\r\n            \r\n            // 更新计数器\r\n            if (statusUpdate && typeof statusUpdate.processedCount !== 'undefined') {\r\n              this.updateCounters(statusUpdate.processedCount, statusUpdate.ruleTriggeredCount);\r\n            } else {\r\n              console.error('收到的状态更新格式不正确:', statusUpdate);\r\n            }\r\n          });\r\n          \r\n          // 开始心跳检测\r\n          this.startHeartbeat();\r\n          \r\n        }, error => {\r\n          console.error('WebSocket连接错误:', error);\r\n          this.connected = false;\r\n          \r\n          // 5秒后自动重连\r\n          setTimeout(() => {\r\n            console.log('尝试重新连接WebSocket...');\r\n            this.connectWebSocket();\r\n          }, 5000);\r\n        });\r\n        \r\n      } catch (e) {\r\n        console.error('WebSocket初始化错误:', e);\r\n        this.connected = false;\r\n      }\r\n    },\r\n    \r\n    startHeartbeat() {\r\n      // 每30秒发送一次心跳\r\n      this.heartbeatTimer = setInterval(() => {\r\n        if (this.stompClient && this.stompClient.connected) {\r\n          console.log('发送心跳...');\r\n          this.stompClient.send('/app/heartbeat', JSON.stringify({\r\n            client: 'frontend',\r\n            timestamp: new Date().getTime()\r\n          }));\r\n        } else {\r\n          console.log('WebSocket未连接，停止心跳');\r\n          this.stopHeartbeat();\r\n          this.connectWebSocket();\r\n        }\r\n      }, 30000);\r\n    },\r\n    \r\n    stopHeartbeat() {\r\n      if (this.heartbeatTimer) {\r\n        clearInterval(this.heartbeatTimer);\r\n      }\r\n    },\r\n    triggerCollection() {\r\n      this.loading = true;\r\n      console.log('开始发送数据采集请求到:', axios.defaults.baseURL + '/api/data-collection/collect');\r\n      axios.post('/api/data-collection/collect')\r\n        .then(response => {\r\n          console.log('数据采集触发成功，响应:', response.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('数据采集触发失败:', error);\r\n          if (error.response) {\r\n            console.error('错误响应:', error.response.status, error.response.data);\r\n          } else if (error.request) {\r\n            console.error('未收到响应，请求是:', error.request);\r\n          } else {\r\n            console.error('请求设置错误:', error.message);\r\n          }\r\n        })\r\n        .finally(() => {\r\n          this.loading = false;\r\n        });\r\n    },\r\n    getStatus() {\r\n      axios.get('/api/data-collection/status')\r\n        .then(response => {\r\n          this.processedCount = response.data.processedCount;\r\n          this.ruleTriggeredCount = response.data.ruleTriggeredCount;\r\n        })\r\n        .catch(error => {\r\n          console.error('获取状态失败:', error);\r\n        });\r\n    },\r\n    testWebSocket() {\r\n      console.log('测试WebSocket消息...');\r\n      axios.get('/api/data-collection/test-websocket')\r\n        .then(response => {\r\n          console.log('WebSocket测试请求发送成功:', response.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('WebSocket测试请求失败:', error);\r\n        });\r\n    },\r\n    testLocalCounter() {\r\n      console.log('测试本地计数器...');\r\n      this.processedCount += 1;\r\n      this.ruleTriggeredCount += 1;\r\n      console.log('本地计数器已增加到:', this.processedCount, this.ruleTriggeredCount);\r\n    },\r\n    forceIncrement() {\r\n      console.log('发送强制+1请求...');\r\n      axios.get('/api/data-collection/force-increment')\r\n        .then(response => {\r\n          console.log('强制+1请求成功:', response.data);\r\n          // 手动刷新状态，避免依赖WebSocket\r\n          this.getStatus();\r\n        })\r\n        .catch(error => {\r\n          console.error('强制+1请求失败:', error);\r\n        });\r\n    },\r\n    resubscribe() {\r\n      if (this.stompClient && this.connected) {\r\n        console.log('重新订阅WebSocket topics');\r\n        // 先取消订阅\r\n        try {\r\n          this.stompClient.unsubscribe('/topic/collection-status');\r\n        } catch (e) {\r\n          console.warn('取消订阅失败:', e);\r\n        }\r\n        \r\n        // 重新订阅\r\n        this.stompClient.subscribe('/topic/collection-status', response => {\r\n          this.lastMessage = response.body;\r\n          const statusUpdate = JSON.parse(response.body);\r\n          console.log('重新订阅后收到状态更新:', statusUpdate);\r\n          \r\n          // 更新计数器 - 使用Vue的$set确保响应式\r\n          this.updateCounters(statusUpdate.processedCount, statusUpdate.ruleTriggeredCount);\r\n        });\r\n        console.log('重新订阅完成');\r\n      } else {\r\n        console.error('WebSocket未连接，无法重新订阅');\r\n        this.connectWebSocket();\r\n      }\r\n    },\r\n    updateCounters(processed, triggered) {\r\n      console.log('手动更新计数器:', processed, triggered);\r\n      this.processedCount = processed;\r\n      this.ruleTriggeredCount = triggered;\r\n      this.$forceUpdate(); // 强制Vue重新渲染\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.stompClient && this.stompClient.connected) {\r\n      this.stompClient.disconnect();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.data-collection-monitor {\r\n  padding: 20px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n.status-cards {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n.status-card {\r\n  flex: 1;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  background-color: #f5f7fa;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n}\r\n.card-title {\r\n  font-size: 16px;\r\n  color: #606266;\r\n  margin-bottom: 10px;\r\n}\r\n.card-value {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: #409EFF;\r\n}\r\n.button-group {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 20px;\r\n}\r\n.debug-info {\r\n  margin: 20px 0;\r\n  padding: 15px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  border: 1px solid #ebeef5;\r\n  font-family: monospace;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}